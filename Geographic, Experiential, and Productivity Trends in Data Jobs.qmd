---
title: "Geographic, Experiential, and Productivity Trends in Data Jobs"
author: "Nakonde Ronah Precious"
format: html
---


## About the datasets

This presentation examines trends in data jobs, particularly focusing on geographic and experiential factors and their impact on productivity. The study leverages data from Kaggle to address evolving job patterns in the data industry.

Two datasets were analyzed: one with data science job entries (9355 rows, 12 columns) and another with employee work patterns and productivity (1000 rows, 5 columns).

The first dataset provides insights into roles, salaries, locations, and employment types in data science.

The second dataset explores remote versus in-office employment, hours worked, productivity scores, and well-being scores.

The analysis aims to understand the impact of remote work on productivity and the broader implications for global job trends in tech.

My motivation for exploring data sets on job trends in data arises from the recent wave of layoffs in the tech industry during 2023-2024. This situation has sparked a debate among major tech CEOs, who argue that remote work diminishes productivity and that the same level of output can be achieved when employees are in the office. I aim to investigate whether this claim holds true by analyzing job trends in data science.


## Jobs Data Overview
This table shows that "Data Science and Research" is the category with the most opportunities, while "Cloud and Database" has the least.
```{r echo=FALSE, results='hide', message=FALSE, warning=FALSE}
library(tidyverse)
library(ggplot2)
library(scales)
library(forcats)
library(svglite)
library(viridis)

jobs_data <- read_csv("/Users/ronahnakonde/Downloads/jobs_in_data.csv") 
productivity_data <- read_csv("/Users/ronahnakonde/Downloads/remote_work_productivity.csv") 
```


```{r echo=FALSE, results='hide', message=FALSE, warning=FALSE}
library(gtExtras)
jobs_summary <- jobs_data |> 
  count(job_category, work_setting, name = "count")
```

```{r echo=FALSE, message=FALSE, warning=FALSE}
jobs_summary1 <- jobs_summary |> 
  group_by(job_category) |> 
  mutate(total_count = sum(count)) |> 
  ungroup() |> 
  mutate(job_category = fct_reorder(job_category, total_count, .desc = TRUE))
  
  job_category_summary <- jobs_summary1 |> 
    group_by(job_category) |> 
    summarise(total_count = sum(count), .groups = "drop")
  
# Create the gt table 
jobs_summary_table <- job_category_summary |> 
  gt() |> 
  gt_plt_bar(column = total_count, width = 70)

jobs_summary_table 

```


## Distribution of Work Settings Amongst Job Categories

```{r echo=FALSE, results='hide', message=FALSE, warning=FALSE}
ggplot(jobs_summary1, aes(y = job_category, x = count, fill = work_setting)) +
  geom_col(position = "fill") +  
  scale_x_continuous(labels = scales::percent) +  # Convert x-axis to percentage
  scale_fill_viridis(discrete = TRUE, option = "D") + 
  labs(x = NULL,
    y = NULL,
    fill = "Work Setting"
  ) +
  theme_classic()
  
```


## Salary Distribution by Experience level and Work Setting

```{r echo=FALSE, results='hide', message=FALSE, warning=FALSE}
# Create the box plot with viridis color palette
ggplot(jobs_data, aes(x = reorder(experience_level, -as.numeric(salary_in_usd)), y = as.numeric(salary_in_usd), fill = work_setting)) +
  geom_boxplot() +
  scale_fill_viridis(discrete = TRUE) +
  labs(x = "Experience Level",
       y = "Salary (USD)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## Average Salary Heatmap by Company Location and Work Setting

```{r echo=FALSE, results='hide', message=FALSE, warning=FALSE}
# Get the top 10 countries by job count
top_countries <- jobs_data |> 
  group_by(company_location) |> 
  summarise(count = n(), .groups = 'drop') |> 
  arrange(desc(count)) |> 
  slice(1:10) |> 
  pull(company_location)

# Filter the original data for these top countries
filtered_data <- jobs_data |> 
  filter(company_location %in% top_countries)

# Summarize the data with proportions and average salary
proportions_usd_data <- filtered_data |> 
  group_by(company_location, work_setting) |> 
  summarise(
    count = n(),                                   
    avg_salary = mean(salary_in_usd, na.rm = TRUE), # Average salary in USD
    .groups = 'drop'                               
  ) |> 
  group_by(company_location) |> 
  mutate(
    proportion = count / sum(count)               # Calculate the proportion of each work setting
  )

ggplot(proportions_usd_data, aes(x = company_location, y = work_setting, fill = avg_salary)) +
  geom_tile() +
  scale_fill_viridis(name = "Average Salary (USD)") +
  labs(x = "Company Location",
    y = "Work Setting"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

## Relationship Between Hours Worked and Productivity

```{r echo=FALSE, results='hide', message=FALSE, warning=FALSE}
ggplot(productivity_data, aes(x = Productivity_Score, y = Hours_Worked_Per_Week, color = Employment_Type)) +
  geom_point(alpha = 0.7, size = 3) +  # Semi-transparent points for better readability
  scale_color_viridis_d(option = "D") +  
  labs(x = "Productivity Score",
    y = "Hours Worked Per Week",
    color = "Employment Type"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "bottom"  
  )
```

## Productivity Score Distribution by Employment Type

```{r echo=FALSE, results='hide', message=FALSE, warning=FALSE}
ggplot(productivity_data, aes(x = Employment_Type, y = Productivity_Score, fill = Employment_Type)) +
  geom_violin(trim = FALSE) +  
  scale_fill_viridis_d() + 
  labs(x = "Employment Type",
    y = "Productivity Score",
    fill = "Employment Type"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## Productivity Score Distribution by Employment Type

```{r echo=FALSE, results='hide', message=FALSE, warning=FALSE}
ggplot(productivity_data, aes(x = Employment_Type, y = Hours_Worked_Per_Week, fill = Employment_Type)) +
  geom_violin(trim = FALSE) +  
  scale_fill_viridis_d() + 
  labs(x = "Employment Type",
    y = "Hours Worked Per Week",
    fill = "Employment Type"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

